description: >
  Lint, test and build the app for a given target architecture

parameters:
  target:
    default: linux-amd64
    description: >
      Executor name the app will be compiled on.
      Make sure to set target_setup accordingly when using a custom executor.
    type: executor
  target_setup:
    default: true
    description: >
      Whether to configure rustup and the required toolchain on the target executor.
      Set to false if you are using a custom executor that already has rust installed, like a docker image.
    type: boolean
  rust_version:
    default: "1.65"
    description: Rust version to use for building the app
    type: string
  release:
    default: true
    description: Whether to build a release binary
    type: boolean
  store_artifact:
    default: false
    description: Whether to store the compiled binary as an artifact
    type: boolean
  artifact_path:
    default: target/release/$CIRCLE_PROJECT_REPONAME
    description: Path to the binary to save in the artifact. Can only be a single file right now
    type: string
  artifact_destination:
    default: app
    description: Artifact destination name
    type: string
  with_cache:
    default: true
    description: Enable cargo caching to speed up jobs
    type: boolean
  cache_version:
    default: v1
    description: Cache version. Increment to invalidate caches
    type: string

executor: <<parameters.target>>

steps:
  - checkout
  - when:
      condition: <<parameters.with_cache>>
      steps:
        - restore_cache:
            keys:
              - &cache-key cargo-<<parameters.cache_version>>-<<parameters.target>>-{{ checksum "Cargo.lock" }}
  - when:
      condition: <<parameters.target_setup>>
      steps:
        - rust/install:
            version: <<parameters.rust_version>>
  - rust/clippy:
      with_cache: false
  - rust/test:
      with_cache: false
  - rust/build:
      with_cache: false
      release: <<parameters.release>>
  - when:
      condition: <<parameters.with_cache>>
      steps:
        - save_cache:
            key: *cache-key
            paths:
              - ~/.cargo
              - ./target
  - when:
      condition: <<parameters.store_artifact>>
      steps:
        - store_artifacts:
            path: <<parameters.artifact_path>>
            destination: <<parameters.artifact_destination>>
